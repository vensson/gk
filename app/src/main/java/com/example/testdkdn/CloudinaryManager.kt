package com.example.testdkdn

import android.content.Context
import android.util.Log
import com.cloudinary.android.MediaManager
import com.cloudinary.android.callback.ErrorInfo
import com.cloudinary.android.callback.UploadCallback
import com.cloudinary.android.policy.GlobalUploadPolicy
import com.cloudinary.android.policy.UploadPolicy
//import com.cloudinary.android.uploadstrategy.UploadRequest
//import com.cloudinary.utils.ErrorInfo

object CloudinaryManager {
    private var initialized = false

    // üõ† Kh·ªüi t·∫°o Cloudinary (ch·ªâ g·ªçi 1 l·∫ßn khi app ch·∫°y)
    fun initCloudinary(context: Context) {
        if (!initialized) {
            val config = mapOf(
                "cloud_name" to "dujmhnsee",  // Thay b·∫±ng cloud_name c·ªßa b·∫°n
                "api_key" to "469854791381627", // Thay b·∫±ng api_key c·ªßa b·∫°n
                "api_secret" to "9DHTsnT0dmoMuJbJrrmoSfSAs2k" // Thay b·∫±ng api_secret c·ªßa b·∫°n
            )
            MediaManager.init(context, config)
            initialized = true
            Log.d("Cloudinary", "‚úÖ Cloudinary ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!")
        }
    }

    // üì§ H√†m t·∫£i ·∫£nh l√™n Cloudinary
    fun uploadImage(filePath: String, callback: (String?) -> Unit) {
        MediaManager.get().upload(filePath)
            .option("folder", "notes_images") // üìÇ L∆∞u ·∫£nh v√†o th∆∞ m·ª•c notes_images
            .callback(object : UploadCallback {
                override fun onStart(requestId: String?) {
                    Log.d("Cloudinary", "üîÑ B·∫Øt ƒë·∫ßu upload ·∫£nh...")
                }

                override fun onProgress(requestId: String?, bytes: Long, totalBytes: Long) {}

                override fun onSuccess(requestId: String?, resultData: Map<*, *>?) {
                    val imageUrl = resultData?.get("url") as? String
                    Log.d("Cloudinary", "‚úÖ Upload th√†nh c√¥ng: $imageUrl")
                    callback(imageUrl) // Tr·∫£ v·ªÅ URL ·∫£nh
                }

                override fun onError(requestId: String?, error: ErrorInfo?) {
                    Log.e("Cloudinary", "‚ùå L·ªói upload: ${error?.description}")
                    callback(null)
                }

                override fun onReschedule(requestId: String?, error: ErrorInfo?) {}
            }).dispatch()
    }
}
